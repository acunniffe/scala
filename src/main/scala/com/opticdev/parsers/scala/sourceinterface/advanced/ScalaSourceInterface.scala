package com.opticdev.parsers.scala.sourceinterface.advanced

// Generated by Marvin

import com.opticdev.marvin.common.ast._
import com.opticdev.marvin.runtime.mutators.{AstMutator, NodeMutatorMap}
import com.opticdev.marvin.runtime.pattern._
import com.opticdev.marvin.runtime.predicates.isNull

import scala.util.Try

object ScalaSourceInterface extends NodeMutatorMap {

  implicit val nodeMutatorMap = this

  implicit val patternMatcher = new PatternMatcher {}


  class Source extends AstMutator {
    def expectedPattern(node: BaseAstNode): CodePattern =
    // Accuracy = 1.0
    {
      CodePattern(ChildNodeList("stats", "\n\n"))
    }

    override val nodeType: String = "Source"
  }

  class TermBlock extends AstMutator {
    def expectedPattern(node: BaseAstNode): CodePattern =
    // Accuracy = 1.0
    {
      CodePattern(ChildNodeList("stats", "\n\n"))
    }

    override val nodeType: String = "Term.Block"
  }

  class Template extends AstMutator {
    def expectedPattern(node: BaseAstNode): CodePattern =
    // Accuracy = 1.0
    {
      CodePattern(ChildNodeList("stats", "\n\n"))
    }

    override val nodeType: String = "Template"
  }

  override val mapping: Map[String, AstMutator] = Map(
    "Source" -> new Source,
    "Term.Block" -> new TermBlock,
    "Template" -> new Template,
  )
}
